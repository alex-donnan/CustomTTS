*** NOTES AND TODOS ***

Nginx
- Reverse proxy for handling passthrough to Django, Listener services

Django -> This will be docked in OBS, will need responsive UI/streamer mode
- Web page
- Web admin
- Use twitch OAuth to 'enable' app and login (post admin setup)
	- Streamer v Moderator login?
- SSE to page for chat updates
	- Chat queue
		- Some metadata:
			- User
			- Label
			- Filename
		- When data is ready from Generator and SSE received, stream
	- Speaker overlay (allow speaker overlay download?)
	- There's a limit of connections to SSE (6 for HTTP1.1) but we wouldn't expect a user/moderator to join that many at once.
- serve OBS folder download (scripts for pausing)

Celery (Listener)
- Listen to Twitch EventSub for active users
- Parse messages, SSE to web page, celery task to Generator queue

Celery (Generator)
- Generate TTS, luting (fine to wait)
- Store output file in MEDIA_ROOT / username / tmp
- SSE for username that file is ready for streaming

Redis
- Message broker for Celery instances

If an event or trigger is globally disabled we need some way to force a refresh of the eventsub object to unsubscribe from listeners
That OR have a celery beat turn it off

TODO:
- On user login perform subscriptions
	- They aren't working. Twitch API user requirements? no visible errors